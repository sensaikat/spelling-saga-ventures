import { create } from 'zustand';
import { persist } from 'zustand/middleware';

// Types
export type Language = {
  id: string;
  name: string;
  nativeName: string;
  flag: string;
};

export type Word = {
  id: string;
  text: string;
  audio?: string;
  image?: string;
  hint?: string;
  difficulty: 'easy' | 'medium' | 'hard';
};

export type WordList = {
  id: string;
  name: string;
  description: string;
  words: Word[];
  languageId: string;
  difficulty: 'easy' | 'medium' | 'hard';
};

export type GameMode = {
  id: string;
  name: string;
  description: string;
  icon: string;
  color: string;
};

export type UserProgress = {
  wordsMastered: string[];
  wordsInProgress: Record<string, number>; // wordId -> correctAttempts
  streakDays: number;
  lastPlayed: string | null;
  points: number;
  level: number;
};

// Available languages
export const languages: Language[] = [
  { id: 'en', name: 'English', nativeName: 'English', flag: 'ЁЯЗ║ЁЯЗ╕' },
  { id: 'es', name: 'Spanish', nativeName: 'Espa├▒ol', flag: 'ЁЯЗкЁЯЗ╕' },
  { id: 'fr', name: 'French', nativeName: 'Fran├зais', flag: 'ЁЯЗлЁЯЗ╖' },
  { id: 'hi', name: 'Hindi', nativeName: 'рд╣рд┐рдиреНрджреА', flag: 'ЁЯЗоЁЯЗ│' },
  { id: 'zh', name: 'Chinese', nativeName: 'ф╕нцЦЗ', flag: 'ЁЯЗиЁЯЗ│' },
  { id: 'ar', name: 'Arabic', nativeName: '╪з┘Д╪╣╪▒╪и┘К╪й', flag: 'ЁЯЗ╕ЁЯЗж' },
  { id: 'bn', name: 'Bengali', nativeName: 'ржмрж╛ржВрж▓рж╛', flag: 'ЁЯЗзЁЯЗй' },
  { id: 'or', name: 'Oriya', nativeName: 'рмУрмбрм╝рм┐рмЖ', flag: 'ЁЯЗоЁЯЗ│' },
  { id: 'ta', name: 'Tamil', nativeName: 'родрооро┐ро┤рпН', flag: 'ЁЯЗоЁЯЗ│' },
  { id: 'te', name: 'Telugu', nativeName: 'р░др▒Жр░▓р▒Бр░Чр▒Б', flag: 'ЁЯЗоЁЯЗ│' },
  { id: 'pl', name: 'Polish', nativeName: 'Polski', flag: 'ЁЯЗ╡ЁЯЗ▒' },
];

// Game modes
export const gameModes: GameMode[] = [
  { 
    id: 'spelling', 
    name: 'Spelling Challenge', 
    description: 'Test your spelling skills by typing the words you hear', 
    icon: 'pencil', 
    color: 'bg-game-blue'
  },
  { 
    id: 'scramble', 
    name: 'Word Scramble', 
    description: 'Unscramble the letters to form the correct word', 
    icon: 'shuffle', 
    color: 'bg-game-purple'
  },
  { 
    id: 'match', 
    name: 'Match & Learn', 
    description: 'Match words with their correct spelling', 
    icon: 'duplicate', 
    color: 'bg-game-green'
  },
  { 
    id: 'fill', 
    name: 'Fill the Blanks', 
    description: 'Complete words by filling in the missing letters', 
    icon: 'text-cursor-input', 
    color: 'bg-game-red'
  },
];

// Sample word list for English, Spanish, Hindi, and added languages
export const wordLists: Record<string, WordList[]> = {
  en: [
    {
      id: 'en-basics',
      name: 'Basic Words',
      description: 'Common everyday words for beginners',
      words: [
        { id: 'en-1', text: 'apple', difficulty: 'easy' },
        { id: 'en-2', text: 'banana', difficulty: 'easy' },
        { id: 'en-3', text: 'cat', difficulty: 'easy' },
        { id: 'en-4', text: 'dog', difficulty: 'easy' },
        { id: 'en-5', text: 'elephant', difficulty: 'medium' },
        { id: 'en-6', text: 'flower', difficulty: 'medium' },
        { id: 'en-7', text: 'giraffe', difficulty: 'medium' },
        { id: 'en-8', text: 'house', difficulty: 'easy' },
      ],
      languageId: 'en',
      difficulty: 'easy',
    },
    {
      id: 'en-animals',
      name: 'Animals',
      description: 'Words related to animals and wildlife',
      words: [
        { id: 'en-a1', text: 'tiger', difficulty: 'medium' },
        { id: 'en-a2', text: 'penguin', difficulty: 'medium' },
        { id: 'en-a3', text: 'zebra', difficulty: 'medium' },
        { id: 'en-a4', text: 'kangaroo', difficulty: 'hard' },
        { id: 'en-a5', text: 'dolphin', difficulty: 'medium' },
        { id: 'en-a6', text: 'octopus', difficulty: 'hard' },
      ],
      languageId: 'en',
      difficulty: 'medium',
    },
  ],
  es: [
    {
      id: 'es-basics',
      name: 'Palabras B├бsicas',
      description: 'Palabras comunes para principiantes',
      words: [
        { id: 'es-1', text: 'manzana', difficulty: 'easy' },
        { id: 'es-2', text: 'pl├бtano', difficulty: 'easy' },
        { id: 'es-3', text: 'gato', difficulty: 'easy' },
        { id: 'es-4', text: 'perro', difficulty: 'easy' },
        { id: 'es-5', text: 'elefante', difficulty: 'medium' },
        { id: 'es-6', text: 'flor', difficulty: 'easy' },
        { id: 'es-7', text: 'jirafa', difficulty: 'medium' },
        { id: 'es-8', text: 'casa', difficulty: 'easy' },
      ],
      languageId: 'es',
      difficulty: 'easy',
    },
  ],
  hi: [
    {
      id: 'hi-basics',
      name: 'рдореВрд▓ рд╢рдмреНрдж',
      description: 'рд╢реБрд░реБрдЖрддреА рд▓реЛрдЧреЛрдВ рдХреЗ рд▓рд┐рдП рдЖрдо рд╢рдмреНрдж',
      words: [
        { id: 'hi-1', text: 'рд╕реЗрдм', difficulty: 'easy' },
        { id: 'hi-2', text: 'рдХреЗрд▓рд╛', difficulty: 'easy' },
        { id: 'hi-3', text: 'рдмрд┐рд▓реНрд▓реА', difficulty: 'easy' },
        { id: 'hi-4', text: 'рдХреБрддреНрддрд╛', difficulty: 'easy' },
        { id: 'hi-5', text: 'рд╣рд╛рдереА', difficulty: 'medium' },
        { id: 'hi-6', text: 'рдлреВрд▓', difficulty: 'easy' },
      ],
      languageId: 'hi',
      difficulty: 'easy',
    },
  ],
  bn: [
    {
      id: 'bn-basics',
      name: 'ржорзМрж▓рж┐ржХ рж╢ржмрзНржж',
      description: 'рж╢рж┐рж╢рзБржжрзЗрж░ ржЬржирзНржп ржкрзНрж░рж╛ржержорж┐ржХ рж╢ржмрзНржж',
      words: [
        { id: 'bn-1', text: 'ржЖржкрзЗрж▓', hint: 'ржПржХржЯрж┐ рж▓рж╛рж▓ ржмрж╛ рж╕ржмрзБржЬ ржлрж▓ ржпрж╛ ржЧрж╛ржЫрзЗ ржЬржирзНржорж╛ржпрж╝', difficulty: 'easy' },
        { id: 'bn-2', text: 'ржХрж▓рж╛', hint: 'ржПржХржЯрж┐ рж▓ржорзНржмрж╛ рж╣рж▓рзБржж ржлрж▓ ржпрж╛рж░ ржЖржХрж╛рж░ ржмрж╛ржБржХрж╛', difficulty: 'easy' },
        { id: 'bn-3', text: 'ржмрж┐ржбрж╝рж╛рж▓', hint: 'ржПржХржЯрж┐ ржЫрзЛржЯ ржкрж╢рзБржкрж╛рж▓ржи ржкрзНрж░рж╛ржгрзА ржпрж╛ ржорж┐ржЙ ржорж┐ржЙ рж╢ржмрзНржж ржХрж░рзЗ', difficulty: 'easy' },
        { id: 'bn-4', text: 'ржХрзБржХрзБрж░', hint: 'ржПржХржЯрж┐ рж╕рж╛ржзрж╛рж░ржг ржкрзЛрж╖рж╛ ржкрзНрж░рж╛ржгрзА ржпрж╛ ржШрзЗржЙ ржШрзЗржЙ ржХрж░рзЗ', difficulty: 'easy' },
        { id: 'bn-5', text: 'рж╣рж╛рждрж┐', hint: 'ржПржХржЯрж┐ ржмржбрж╝ ржзрзВрж╕рж░ ржкрзНрж░рж╛ржгрзА ржпрж╛рж░ рж╢рзБржБржбрж╝ ржЖржЫрзЗ', difficulty: 'medium' },
        { id: 'bn-6', text: 'ржлрзБрж▓', hint: 'ржПржХржЯрж┐ рж░ржЩрж┐ржи ржЙржжрзНржнрж┐ржж ржпрж╛ ржлрзЛржЯрзЗ', difficulty: 'easy' },
      ],
      languageId: 'bn',
      difficulty: 'easy',
    }
  ],
  or: [
    {
      id: 'or-basics',
      name: 'рморнМрм│рм┐рмХ рм╢рммрнНрмж',
      description: 'рмкрнНрм░рм╛рм░рморнНрмнрм┐рмХ рморм╛рмирмЩрнНрмХ рмкрм╛рмЗрмБ рм╕рм╛рмзрм╛рм░рмг рм╢рммрнНрмж',
      words: [
        { id: 'or-1', text: 'рмЖрмкрм▓', hint: 'рмПрмХ рм▓рм╛рм▓ рмХрм┐рморнНрммрм╛ рм╕рммрнБрмЬ рмлрм│ рмпрм╛рм╣рм╛ рмЧрмЫрм░рнЗ рм╣рнБрмП', difficulty: 'easy' },
        { id: 'or-2', text: 'рмХрмжрм│рнА', hint: 'рмПрмХ рм▓рморнНрммрм╛ рм╣рм│рмжрм┐рмЖ рмлрм│ рмпрм╛рм╣рм╛рм░ рммрмХрнНрм░ рмЖрмХрнГрмдрм┐', difficulty: 'easy' },
        { id: 'or-3', text: 'рммрм┐рм▓рнЗрмЗ', hint: 'рмПрмХ рмЫрнЛрмЯ рмкрнЛрм╖рм╛ рмкрнНрм░рм╛рмгрнА рмпрм┐рмП рморнЗрмЙрмБ рморнЗрмЙрмБ рмХрм░рнЗ', difficulty: 'easy' },
        { id: 'or-4', text: 'рмХрнБрмХрнБрм░', hint: 'рмПрмХ рм╕рм╛рмзрм╛рм░рмг рмкрнЛрм╖рм╛ рмпрм┐рмП рмнрнБрмХрм┐рмерм╛рмП', difficulty: 'easy' },
      ],
      languageId: 'or',
      difficulty: 'easy',
    }
  ],
  ta: [
    {
      id: 'ta-basics',
      name: 'роЕроЯро┐рокрпНрокроЯрпИ ро╡ро╛ро░рпНродрпНродрпИроХро│рпН',
      description: 'роЖро░роорпНрок рокропро┐ро▒рпНроЪро┐роХрпНроХро╛рой рокрпКродрпБро╡ро╛рой ро╡ро╛ро░рпНродрпНродрпИроХро│рпН',
      words: [
        { id: 'ta-1', text: 'роЖрокрпНрокро┐ро│рпН', hint: 'рооро░родрпНродро┐ро▓рпН ро╡ро│ро░рпБроорпН роЪро┐ро╡рокрпНрокрпБ роЕро▓рпНро▓родрпБ рокроЪрпНроЪрпИ рокро┤роорпН', difficulty: 'easy' },
        { id: 'ta-2', text: 'ро╡ро╛ро┤рпИрокрпНрокро┤роорпН', hint: 'ро╡ро│рпИроирпНрод ро╡роЯро┐ро╡роорпН роХрпКрогрпНроЯ роирпАро│рооро╛рой роороЮрпНроЪро│рпН роиро┐ро▒ рокро┤роорпН', difficulty: 'easy' },
        { id: 'ta-3', text: 'рокрпВройрпИ', hint: 'рооро┐ропро╛ро╡рпН роОройрпНро▒рпБ роЪродрпНродрооро┐роЯрпБроорпН роЪро┐ро▒ро┐роп ро╡ро┐ро▓роЩрпНроХрпБ', difficulty: 'easy' },
        { id: 'ta-4', text: 'роиро╛ропрпН', hint: 'роХрпБро░рпИроХрпНроХрпБроорпН рокрпКродрпБро╡ро╛рой роЪрпЖро▓рпНро▓рокрпНрокро┐ро░ро╛рогро┐', difficulty: 'easy' },
      ],
      languageId: 'ta',
      difficulty: 'easy',
    }
  ],
  te: [
    {
      id: 'te-basics',
      name: 'р░кр▒Нр░░р░╛р░ер░ор░┐р░Х р░кр░жр░╛р░▓р▒Б',
      description: 'р░кр▒Нр░░р░╛р░░р░Вр░нр░Хр▒Бр░▓р░Хр▒Б р░╕р░╛р░зр░╛р░░р░г р░кр░жр░╛р░▓р▒Б',
      words: [
        { id: 'te-1', text: 'р░пр░╛р░кр░┐р░▓р▒Н', hint: 'р░Ър▒Жр░Яр▒Нр░▓р░кр▒И р░кр▒Жр░░р░┐р░Чр▒З р░Ор░░р▒Бр░кр▒Б р░▓р▒Зр░жр░╛ р░Жр░Хр▒Бр░кр░Ър▒Нр░Ъ р░кр░Вр░бр▒Б', difficulty: 'easy' },
        { id: 'te-2', text: 'р░Ер░░р░Яр░┐р░кр░Вр░бр▒Б', hint: 'р░╡р░Вр░кр▒Б р░Жр░Хр░╛р░░р░Вр░др▒Л р░Йр░ир▒Нр░и р░кр▒Кр░бр░╡р▒Ир░и р░кр░╕р▒Бр░кр▒Б р░░р░Вр░Чр▒Б р░кр░Вр░бр▒Б', difficulty: 'easy' },
        { id: 'te-3', text: 'р░кр░┐р░▓р▒Нр░▓р░┐', hint: 'р░ор▒Нр░пр░╛р░╡р▒Н р░Ер░ир▒З р░╢р░мр▒Нр░жр░В р░Ър▒Зр░╕р▒З р░Ър░┐р░ир▒Нр░и р░кр▒Жр░Вр░кр▒Бр░бр▒Б р░Ьр░Вр░др▒Бр░╡р▒Б', difficulty: 'easy' },
        { id: 'te-4', text: 'р░Хр▒Бр░Хр▒Нр░Х', hint: 'р░ор▒Кр░░р░┐р░Чр▒З р░╕р░╛р░зр░╛р░░р░г р░кр▒Жр░Вр░кр▒Бр░бр▒Б р░Ьр░Вр░др▒Бр░╡р▒Б', difficulty: 'easy' },
      ],
      languageId: 'te',
      difficulty: 'easy',
    }
  ],
  pl: [
    {
      id: 'pl-basics',
      name: 'Podstawowe S┼Вowa',
      description: 'Codzienne s┼Вowa dla poczя┐╜я┐╜tkuj─Еcych',
      words: [
        { id: 'pl-1', text: 'jab┼Вko', hint: 'Czerwony lub zielony owoc, kt├│ry ro┼Ыnie na drzewach', difficulty: 'easy' },
        { id: 'pl-2', text: 'banan', hint: 'D┼Вugi ┼╝├│┼Вty owoc o zakrzywionym kszta┼Вcie', difficulty: 'easy' },
        { id: 'pl-3', text: 'kot', hint: 'Ma┼Вe futrzaste zwierz─Щ domowe, kt├│re miauczy', difficulty: 'easy' },
        { id: 'pl-4', text: 'pies', hint: 'Popularne zwierz─Щ domowe, kt├│re szczeka', difficulty: 'easy' },
        { id: 'pl-5', text: 's┼Вo┼Д', hint: 'Du┼╝e szare zwierz─Щ z tr─Еb─Е', difficulty: 'medium' },
      ],
      languageId: 'pl',
      difficulty: 'easy',
    }
  ],
  ar: [
    {
      id: 'ar-basics',
      name: '╪з┘Д┘Г┘Д┘Е╪з╪к ╪з┘Д╪г╪│╪з╪│┘К╪й',
      description: '┘Г┘Д┘Е╪з╪к ┘К┘И┘Е┘К╪й ╪┤╪з╪ж╪╣╪й ┘Д┘Д┘Е╪и╪к╪п╪ж┘К┘Ж',
      words: [
        { id: 'ar-1', text: '╪к┘Б╪з╪н╪й', hint: '┘Б╪з┘Г┘З╪й ╪н┘Е╪▒╪з╪б ╪г┘И ╪о╪╢╪▒╪з╪б ╪к┘Ж┘Е┘И ╪╣┘Д┘Й ╪з┘Д╪г╪┤╪м╪з╪▒', difficulty: 'easy' },
        { id: 'ar-2', text: '┘Е┘И╪▓', hint: '┘Б╪з┘Г┘З╪й ╪╡┘Б╪▒╪з╪б ╪╖┘И┘К┘Д╪й ╪░╪з╪к ╪┤┘Г┘Д ┘Е┘Ж╪н┘Ж┘К', difficulty: 'easy' },
        { id: 'ar-3', text: '┘В╪╖╪й', hint: '╪н┘К┘И╪з┘Ж ╪г┘Д┘К┘Б ╪╡╪║┘К╪▒ ╪░┘И ┘Б╪▒┘И ┘К┘Е┘И╪б', difficulty: 'easy' },
        { id: 'ar-4', text: '┘Г┘Д╪и', hint: '╪н┘К┘И╪з┘Ж ╪г┘Д┘К┘Б ╪┤╪з╪ж╪╣ ┘К┘Ж╪и╪н', difficulty: 'easy' },
        { id: 'ar-5', text: '┘Б┘К┘Д', hint: '╪н┘К┘И╪з┘Ж ╪▒┘Е╪з╪п┘К ┘Г╪и┘К╪▒ ┘Д┘З ╪о╪▒╪╖┘И┘Е', difficulty: 'medium' },
        { id: 'ar-6', text: '╪▓┘З╪▒╪й', hint: '┘Ж╪и╪з╪к ┘Е┘Д┘И┘Ж ┘К╪▓┘З╪▒', difficulty: 'easy' },
      ],
      languageId: 'ar',
      difficulty: 'easy',
    }
  ],
  fr: [
    {
      id: 'fr-basics',
      name: 'Mots de Base',
      description: 'Mots quotidiens pour les d├йbutants',
      words: [
        { id: 'fr-1', text: 'pomme', hint: 'Un fruit rouge ou vert qui pousse sur les arbres', difficulty: 'easy' },
        { id: 'fr-2', text: 'banane', hint: 'Un fruit jaune long ├а forme courb├йe', difficulty: 'easy' },
        { id: 'fr-3', text: 'chat', hint: 'Un petit animal de compagnie qui miaule', difficulty: 'easy' },
        { id: 'fr-4', text: 'chien', hint: 'Un animal de compagnie commun qui aboie', difficulty: 'easy' },
        { id: 'fr-5', text: '├йl├йphant', hint: 'Un grand animal gris avec une trompe', difficulty: 'medium' },
      ],
      languageId: 'fr',
      difficulty: 'easy',
    }
  ],
  zh: [
    {
      id: 'zh-basics',
      name: 'хЯ║чбАшпНц▒З',
      description: 'хИЭхнжшАЕх╕╕чФичЪДцЧех╕╕шпНц▒З',
      words: [
        { id: 'zh-1', text: 'шЛ╣цЮЬ', hint: 'ф╕АчзНчФЯщХ┐хЬицаСф╕КчЪДч║вшЙ▓цИЦч╗┐шЙ▓ц░┤цЮЬ', difficulty: 'easy' },
        { id: 'zh-2', text: 'щжЩшХЙ', hint: 'ф╕АчзНх╝пцЫ▓х╜вчК╢чЪДщХ┐щ╗ДшЙ▓ц░┤цЮЬ', difficulty: 'easy' },
        { id: 'zh-3', text: 'чМл', hint: 'ф╕АчзНф╝ЪхЦ╡хЦ╡хПлчЪДх░ПхЮЛцпЫшМ╕шМ╕хоачЙй', difficulty: 'easy' },
        { id: 'zh-4', text: 'чЛЧ', hint: 'ф╕АчзНх╕╕шзБчЪДф╝Ъц▒кц▒кхПлчЪДхоачЙй', difficulty: 'easy' },
        { id: 'zh-5', text: 'хдзш▒б', hint: 'ф╕АчзНцЬЙщХ┐щ╝╗хнРчЪДхдзхЮЛчБ░шЙ▓хКичЙй', difficulty: 'medium' },
      ],
      languageId: 'zh',
      difficulty: 'easy',
    }
  ],
};

// Store for application state
export interface GameState {
  selectedLanguage: Language | null;
  selectLanguage: (language: Language) => void;
  
  currentWordList: WordList | null;
  setCurrentWordList: (wordList: WordList | null) => void;
  
  selectedGameMode: GameMode | null;
  setSelectedGameMode: (gameMode: GameMode | null) => void;
  
  progress: UserProgress;
  addMasteredWord: (wordId: string) => void;
  updateWordProgress: (wordId: string, isCorrect: boolean) => void;
  addPoints: (points: number) => void;
  checkAndUpdateStreak: () => void;
  
  isOfflineMode: boolean;
  toggleOfflineMode: () => void;
}

export const useGameStore = create<GameState>()(
  persist(
    (set, get) => ({
      selectedLanguage: null,
      selectLanguage: (language) => set({ selectedLanguage: language }),
      
      currentWordList: null,
      setCurrentWordList: (wordList) => set({ currentWordList: wordList }),
      
      selectedGameMode: null,
      setSelectedGameMode: (gameMode) => set({ selectedGameMode: gameMode }),
      
      progress: {
        wordsMastered: [],
        wordsInProgress: {},
        streakDays: 0,
        lastPlayed: null,
        points: 0,
        level: 1,
      },
      
      addMasteredWord: (wordId) => set((state) => ({
        progress: {
          ...state.progress,
          wordsMastered: [...state.progress.wordsMastered, wordId]
        }
      })),
      
      updateWordProgress: (wordId, isCorrect) => set((state) => {
        const currentProgress = state.progress.wordsInProgress[wordId] || 0;
        const newProgress = isCorrect ? currentProgress + 1 : Math.max(0, currentProgress - 1);
        
        // If reached mastery threshold (3 correct attempts)
        if (newProgress >= 3 && !state.progress.wordsMastered.includes(wordId)) {
          return {
            progress: {
              ...state.progress,
              wordsMastered: [...state.progress.wordsMastered, wordId],
              wordsInProgress: {
                ...state.progress.wordsInProgress,
                [wordId]: newProgress
              },
              points: state.progress.points + 10 // Bonus points for mastering
            }
          };
        }
        
        return {
          progress: {
            ...state.progress,
            wordsInProgress: {
              ...state.progress.wordsInProgress,
              [wordId]: newProgress
            },
            points: state.progress.points + (isCorrect ? 2 : 0)
          }
        };
      }),
      
      addPoints: (points) => set((state) => {
        const newPoints = state.progress.points + points;
        const newLevel = Math.floor(newPoints / 100) + 1; // Level up every 100 points
        
        return {
          progress: {
            ...state.progress,
            points: newPoints,
            level: newLevel
          }
        };
      }),
      
      checkAndUpdateStreak: () => set((state) => {
        const today = new Date().toISOString().split('T')[0];
        const lastPlayed = state.progress.lastPlayed;
        
        // If first time playing or played on a different day
        if (!lastPlayed || lastPlayed !== today) {
          // Check if the last day played was yesterday
          if (lastPlayed) {
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            const yesterdayString = yesterday.toISOString().split('T')[0];
            
            if (lastPlayed === yesterdayString) {
              // Streak continues
              return {
                progress: {
                  ...state.progress,
                  streakDays: state.progress.streakDays + 1,
                  lastPlayed: today
                }
              };
            }
          }
          
          // Streak reset or first day
          return {
            progress: {
              ...state.progress,
              streakDays: 1,
              lastPlayed: today
            }
          };
        }
        
        // Same day, no change to streak
        return { progress: state.progress };
      }),
      
      isOfflineMode: false,
      toggleOfflineMode: () => set((state) => ({ isOfflineMode: !state.isOfflineMode })),
    }),
    {
      name: 'spelling-saga-game-storage',
    }
  )
);

